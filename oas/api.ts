/* tslint:disable */
/* eslint-disable */
/**
 * backlog api
 * This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An explanation about the purpose of this instance.
 * @export
 * @interface Attachment
 */
export interface Attachment {
    [key: string]: object | any;

    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Attachment
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Attachment
     */
    name: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Attachment
     */
    size: number;
}
/**
 * An explanation about the purpose of this instance.
 * @export
 * @interface IssueType
 */
export interface IssueType {
    [key: string]: object | any;

    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof IssueType
     */
    color: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof IssueType
     */
    displayOrder: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof IssueType
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof IssueType
     */
    name: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof IssueType
     */
    projectId: number;
}
/**
 * An explanation about the purpose of this instance.
 * @export
 * @interface Milestone
 */
export interface Milestone {
    /**
     * An explanation about the purpose of this instance.
     * @type {boolean}
     * @memberof Milestone
     */
    archived: boolean;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Milestone
     */
    description: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Milestone
     */
    displayOrder: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Milestone
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Milestone
     */
    name: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Milestone
     */
    projectId: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Milestone
     */
    releaseDueDate: string | null;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Milestone
     */
    startDate: string | null;
}
/**
 * 
 * @export
 * @interface Oauth2TokenCodeRequest
 */
export interface Oauth2TokenCodeRequest {
    /**
     * 値は”authorization_code”で固定
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    grant_type: Oauth2TokenCodeRequestGrantTypeEnum;
    /**
     * 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    code: string;
    /**
     * 認可エンドポイントで指定した場合は必須
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    redirect_uri?: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    client_id: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenCodeRequest
     */
    client_secret: string;
}

/**
    * @export
    * @enum {string}
    */
export enum Oauth2TokenCodeRequestGrantTypeEnum {
    AuthorizationCode = 'authorization_code'
}

/**
 * 
 * @export
 * @interface Oauth2TokenRefleshRequest
 */
export interface Oauth2TokenRefleshRequest {
    /**
     * 値は”refresh_token”で固定
     * @type {string}
     * @memberof Oauth2TokenRefleshRequest
     */
    grant_type: Oauth2TokenRefleshRequestGrantTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRefleshRequest
     */
    refresh_token: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRefleshRequest
     */
    client_id: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRefleshRequest
     */
    client_secret: string;
}

/**
    * @export
    * @enum {string}
    */
export enum Oauth2TokenRefleshRequestGrantTypeEnum {
    RefreshToken = 'refresh_token'
}

/**
 * 
 * @export
 * @interface Oauth2TokenRequestResponse
 */
export interface Oauth2TokenRequestResponse {
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequestResponse
     */
    access_token?: string;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequestResponse
     */
    token_type?: string;
    /**
     * 
     * @type {number}
     * @memberof Oauth2TokenRequestResponse
     */
    expires_in?: number;
    /**
     * 
     * @type {string}
     * @memberof Oauth2TokenRequestResponse
     */
    refresh_token?: string;
}
/**
 * An explanation about the purpose of this instance.
 * @export
 * @interface Priority
 */
export interface Priority {
    [key: string]: object | any;

    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Priority
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Priority
     */
    name: string;
}
/**
 * プロジェクト一覧
 * @export
 * @interface ProjectItem
 */
export interface ProjectItem {
    /**
     * An explanation about the purpose of this instance.
     * @type {boolean}
     * @memberof ProjectItem
     */
    archived: boolean;
    /**
     * An explanation about the purpose of this instance.
     * @type {boolean}
     * @memberof ProjectItem
     */
    chartEnabled: boolean;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof ProjectItem
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof ProjectItem
     */
    name: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof ProjectItem
     */
    projectKey: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {boolean}
     * @memberof ProjectItem
     */
    projectLeaderCanEditProjectLeader: boolean;
    /**
     * An explanation about the purpose of this instance.
     * @type {boolean}
     * @memberof ProjectItem
     */
    subtaskingEnabled: boolean;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof ProjectItem
     */
    textFormattingRule: string;
}
/**
 * An explanation about the purpose of this instance.
 * @export
 * @interface SharedFile
 */
export interface SharedFile {
    [key: string]: object | any;

    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof SharedFile
     */
    created: string;
    /**
     * 
     * @type {UserData}
     * @memberof SharedFile
     */
    createdUser: UserData;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof SharedFile
     */
    dir: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof SharedFile
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof SharedFile
     */
    name: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof SharedFile
     */
    size: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof SharedFile
     */
    type: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof SharedFile
     */
    updated: string;
    /**
     * 
     * @type {UserData}
     * @memberof SharedFile
     */
    updatedUser: UserData;
}
/**
 * An explanation about the purpose of this instance.
 * @export
 * @interface Star
 */
export interface Star {
    [key: string]: object | any;

    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Star
     */
    comment: string | null;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Star
     */
    created: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Star
     */
    id: number;
    /**
     * 
     * @type {UserData}
     * @memberof Star
     */
    presenter: UserData;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Star
     */
    title: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Star
     */
    url: string;
}
/**
 * 課題に設定できる状態
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Status
     */
    color: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Status
     */
    displayOrder: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Status
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Status
     */
    name: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Status
     */
    projectId: number;
}
/**
 * An explanation about the purpose of this instance.
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    actualHours: string | null;
    /**
     * 
     * @type {UserData}
     * @memberof Task
     */
    assignee: UserData;
    /**
     * An explanation about the purpose of this instance.
     * @type {Array<Attachment>}
     * @memberof Task
     */
    attachments: Array<Attachment>;
    /**
     * An explanation about the purpose of this instance.
     * @type {Array<string>}
     * @memberof Task
     */
    category: Array<string>;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    created: string;
    /**
     * 
     * @type {UserData}
     * @memberof Task
     */
    createdUser: UserData;
    /**
     * An explanation about the purpose of this instance.
     * @type {Array<string>}
     * @memberof Task
     */
    customFields: Array<string>;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    description: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    dueDate: string | null;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Task
     */
    estimatedHours: number | null;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Task
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    issueKey: string;
    /**
     * 
     * @type {IssueType}
     * @memberof Task
     */
    issueType: IssueType;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Task
     */
    keyId: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {Array<Milestone>}
     * @memberof Task
     */
    milestone: Array<Milestone>;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    parentIssueId: string | null;
    /**
     * 
     * @type {Priority}
     * @memberof Task
     */
    priority: Priority;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof Task
     */
    projectId: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    resolutions: string | null;
    /**
     * An explanation about the purpose of this instance.
     * @type {Array<SharedFile>}
     * @memberof Task
     */
    sharedFiles: Array<SharedFile>;
    /**
     * An explanation about the purpose of this instance.
     * @type {Array<Star>}
     * @memberof Task
     */
    stars: Array<Star>;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    startDate: string | null;
    /**
     * 
     * @type {Status}
     * @memberof Task
     */
    status: Status;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    summary: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof Task
     */
    updated: string;
    /**
     * 
     * @type {UserData}
     * @memberof Task
     */
    updatedUser: UserData;
    /**
     * An explanation about the purpose of this instance.
     * @type {Array<string>}
     * @memberof Task
     */
    versions: Array<string>;
}
/**
 * The root schema comprises the entire JSON document.
 * @export
 * @interface UserData
 */
export interface UserData {
    [key: string]: object | any;

    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof UserData
     */
    id: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof UserData
     */
    lang: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof UserData
     */
    mailAddress: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof UserData
     */
    name: string;
    /**
     * An explanation about the purpose of this instance.
     * @type {number}
     * @memberof UserData
     */
    roleType: number;
    /**
     * An explanation about the purpose of this instance.
     * @type {string}
     * @memberof UserData
     */
    userId?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary アクセストークンリクエスト
         * @param {string} grantType 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {string} [code] 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
         * @param {string} [redirectUri] 認可エンドポイントで指定した場合は必須
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Oauth2TokenPost: async (grantType: string, clientId: string, clientSecret: string, code?: string, redirectUri?: string, refreshToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'grantType' is not null or undefined
            assertParamExists('apiV2Oauth2TokenPost', 'grantType', grantType)
            // verify required parameter 'clientId' is not null or undefined
            assertParamExists('apiV2Oauth2TokenPost', 'clientId', clientId)
            // verify required parameter 'clientSecret' is not null or undefined
            assertParamExists('apiV2Oauth2TokenPost', 'clientSecret', clientSecret)
            const localVarPath = `/api/v2/oauth2/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
            if (code !== undefined) { 
                localVarFormParams.set('code', code as any);
            }
    
            if (redirectUri !== undefined) { 
                localVarFormParams.set('redirect_uri', redirectUri as any);
            }
    
            if (refreshToken !== undefined) { 
                localVarFormParams.set('refresh_token', refreshToken as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロジェクトの一覧を取得
         * @param {string} [archived] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ProjectsGet: async (archived?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (archived !== undefined) {
                localVarQueryParameter['archived'] = archived;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 認証ユーザー情報の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMyselfGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/users/myself`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary アクセストークンリクエスト
         * @param {string} grantType 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {string} [code] 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
         * @param {string} [redirectUri] 認可エンドポイントで指定した場合は必須
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2Oauth2TokenPost(grantType: string, clientId: string, clientSecret: string, code?: string, redirectUri?: string, refreshToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Oauth2TokenRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2Oauth2TokenPost(grantType, clientId, clientSecret, code, redirectUri, refreshToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロジェクトの一覧を取得
         * @param {string} [archived] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2ProjectsGet(archived?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProjectItem>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2ProjectsGet(archived, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary 認証ユーザー情報の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2UsersMyselfGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2UsersMyselfGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary アクセストークンリクエスト
         * @param {string} grantType 
         * @param {string} clientId 
         * @param {string} clientSecret 
         * @param {string} [code] 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
         * @param {string} [redirectUri] 認可エンドポイントで指定した場合は必須
         * @param {string} [refreshToken] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2Oauth2TokenPost(grantType: string, clientId: string, clientSecret: string, code?: string, redirectUri?: string, refreshToken?: string, options?: any): AxiosPromise<Oauth2TokenRequestResponse> {
            return localVarFp.apiV2Oauth2TokenPost(grantType, clientId, clientSecret, code, redirectUri, refreshToken, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロジェクトの一覧を取得
         * @param {string} [archived] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2ProjectsGet(archived?: string, options?: any): AxiosPromise<Array<ProjectItem>> {
            return localVarFp.apiV2ProjectsGet(archived, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 認証ユーザー情報の取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2UsersMyselfGet(options?: any): AxiosPromise<UserData> {
            return localVarFp.apiV2UsersMyselfGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary アクセストークンリクエスト
     * @param {string} grantType 
     * @param {string} clientId 
     * @param {string} clientSecret 
     * @param {string} [code] 認可エンドポイントのリダイレクトから取得した認可コード 開発アプリケーション ページで設定したものと同じUri
     * @param {string} [redirectUri] 認可エンドポイントで指定した場合は必須
     * @param {string} [refreshToken] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2Oauth2TokenPost(grantType: string, clientId: string, clientSecret: string, code?: string, redirectUri?: string, refreshToken?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiV2Oauth2TokenPost(grantType, clientId, clientSecret, code, redirectUri, refreshToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロジェクトの一覧を取得
     * @param {string} [archived] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2ProjectsGet(archived?: string, options?: any) {
        return DefaultApiFp(this.configuration).apiV2ProjectsGet(archived, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 認証ユーザー情報の取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiV2UsersMyselfGet(options?: any) {
        return DefaultApiFp(this.configuration).apiV2UsersMyselfGet(options).then((request) => request(this.axios, this.basePath));
    }
}


